
#include <Stepper.h> 
#include <InkShield.h>


//initialize data (font) table
const int minChar = 32;
const int maxChar = 96;

//each letter is 10 rows
const int rowsPerChar = 10;

const int fontSize = (maxChar-minChar+1)*rowsPerChar;

const word font[fontSize] = {
// ASCII 032-048; $20-$2F
// 'Space' thru "/"
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '!'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000111111110011,
0b0000111111110011,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '"'
0b0000000000000000,
0b0000000000000000,
0b0000111000000000,
0b0000111000000000,
0b0000000000000000,
0b0000000000000000,
0b0000111000000000,
0b0000111000000000,
0b0000000000000000,
0b0000000000000000,
// '#'
0b0000000110011000,
0b0000000110011110,
0b0000000111111110,
0b0000011111111000,
0b0000011110011000,
0b0000000110011110,
0b0000000111111110,
0b0000011111111000,
0b0000011110011000,
0b0000000110011000,
// '$'
0b0000001100001100,
0b0000011110001110,
0b0000010011000010,
0b0000010011000010,
0b0000111111111111,
0b0000111111111111,
0b0000010000110010,
0b0000010000110010,
0b0000011100011110,
0b0000001100001100,
// '%'
0b0000001100000110,
0b000001001001110,
0b0000010010011100,
0b0000001100111000,
0b0000000001110000,
0b0000000011100000,
0b0000000111001100,
0b0000001110010010,
0b0000011100010010,
0b0000011000001100,
// '&'
0b0000001110011100,
0b0000011111111110,
0b0000110001100011,
0b0000110011110011,
0b0000011110110011,
0b0000001100011110,
0b0000000000111100,
0b0000000011110110,
0b0000000011000111,
0b0000000010000011,
// '''
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000111000000000,
0b0000111000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '('
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000001111111100,
0b0000111111111111,
0b0000110000000011,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// ')'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000110000000011,
0b0000111111111111,
0b0000001111111100,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '*'
0b0000000000000000,
0b0000000011001000,
0b0000000011011100,
0b0000000001111000,
0b0000001111110000,
0b0000001111110000,
0b0000000001111000,
0b0000000011011100,
0b0000000011001000,
0b0000000000000000,
// '+'
0b0000000000000000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000001111111100,
0b0000001111111100,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000000000000,
// ','
0b0000000000000000,
0b0000000000001101,
0b0000000000001110,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '-'
0b0000000000000000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000000000000,
// '.'
0b0000000000000000,
0b0000000000001100,
0b0000000000001100,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '/'
0b0000000000000110,
0b0000000000001110,
0b0000000000011100,
0b0000000000111000,
0b0000000001110000,
0b0000000011100000,
0b0000000111000000,
0b0000001110000000,
0b0000011100000000,
0b0000011000000000,

// ASCII 048-057; $30-$39
// "0" thru "9"
// '0'
0b0000001111111100,
0b0000011111111110,
0b0000011000000110,
0b0000110000001011,
0b0000100001110001,
0b0000100011100001,
0b0000110100000011,
0b0000011000000110,
0b0000011111111110,
0b0000001111111100,
// '1'
0b0000000000000000,
0b0000000000000000,
0b0000110000000011,
0b0000110000000011,
0b0000111111111111,
0b0000111111111111,
0b0000000000000011,
0b0000000000000011,
0b0000000000000000,
0b0000000000000000,
// '2'
0b0000001100001111,
0b0000011000011111,
0b0000011000011011,
0b0000110000110011,
0b0000110000110011,
0b0000110001100011,
0b0000110001100011,
0b0000011011000011,
0b0000011111000011,
0b0000001110000011,
// '3'
0b0000001000000100,
0b0000011000000110,
0b0000110000000011,
0b0000110001100011,
0b0000100001100001,
0b0000100001100001,
0b0000110011110011,
0b0000110011110011,
0b0000011110011110,
0b0000001100001100,
// '4'
0b0000000001110000,
0b0000000011110000,
0b0000000110110000,
0b0000001100110000,
0b0000011000110000,
0b0000110000110000,
0b0000111111111111,
0b0000111111111111,
0b0000000000110000,
0b0000000000110000,
// '5'
0b0000111110000100,
0b0000111111000110,
0b0000110011000011,
0b0000110011000011,
0b0000110011000001,
0b0000110011000001,
0b0000110011000011,
0b0000110011000011,
0b0000110001111110,
0b0000110000111100,
// '6'
0b0000000011111100,
0b0000000111111110,
0b0000001101100011,
0b0000011001100011,
0b0000110001100001,
0b0000110001100001,
0b0000110001100011,
0b0000110001100011,
0b0000110000111110,
0b0000000000011100,
// '7'
0b0000110000000011,
0b0000110000000111,
0b0000110000001100,
0b0000110000011000,
0b0000110000110000,
0b0000110001100000,
0b0000110011000000,
0b0000110110000000,
0b0000111100000000,
0b0000111000000000,
// '8'
0b0000001100001100,
0b0000011110011110,
0b0000010011110010,
0b0000110001100011,
0b0000100001100001,
0b0000100001100001,
0b0000110001100011,
0b0000010011110010,
0b0000011110011110,
0b0000001100001100,
// '9'
0b0000001110000000,
0b0000011111000011,
0b0000110001100011,
0b0000110001100011,
0b0000100001100011,
0b0000100001100011,
0b0000110001100110,
0b0000110001101100,
0b0000011111111000,
0b0000001111110000,

// ASCII 058-064; $3A-$40
// ":" thru "@"
// ':'
0b0000000000000000,
0b0000000110001100,
0b0000000110001100,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// ';'
0b0000000000000000,
0b0000000110001101,
0b0000000110001110,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '<'
0b0000000000000000,
0b0000000000000000,
0b0000000001000000,
0b0000000011100000,
0b0000000110110000,
0b0000001100011000,
0b0000011000001100,
0b0000010000000100,
0b0000000000000000,
0b0000000000000000,
// '='
0b0000000000000000,
0b0000000000000000,
0b0000000110011000,
0b0000000110011000,
0b0000000110011000,
0b0000000110011000,
0b0000000110011000,
0b0000000110011000,
0b0000000000000000,
0b0000000000000000,
// '>'
0b0000000000000000,
0b0000000000000000,
0b0000010000000100,
0b0000011000001100,
0b0000001100011000,
0b0000000110110000,
0b0000000011100000,
0b0000000001000000,
0b0000000000000000,
0b0000000000000000,
// '?'
0b0000001100000000,
0b0000011100000000,
0b0000110000000000,
0b0000110000000000,
0b0000100000011011,
0b0000100000111011,
0b0000110001100000,
0b0000110011000000,
0b0000011110000000,
0b0000001100000000,
// '@'
0b0000001111111100,
0b0000011111111110,
0b0000011000000110,
0b0000110001110011,
0b0000100010001001,
0b0000100010001001,
0b0000110011110011,
0b0000011000001010,
0b0000011111111000,
0b0000001111110000,

// ASCII 065-090; $41-$5A
// "A" thru "Z"
0b0000000011111111,
0b0000000111111111,
0b0000001101100000,
0b0000011001100000,
0b0000110001100000,
0b0000110001100000,
0b0000011001100000,
0b0000001101100000,
0b0000000111111111,
0b0000000011111111,
// 'B'
0b0000111111111111,
0b0000111111111111,
0b0000110001100011,
0b0000110001100011,
0b0000110001100011,
0b0000110001100011,
0b0000110001100011,
0b0000110001100011,
0b0000011111111111,
0b0000001110011110,
// 'C'
0b0000001111111100,
0b0000011111111110,
0b0000011000000110,
0b0000110000000011,
0b0000100000000001,
0b0000100000000001,
0b0000110000000011,
0b0000011000000110,
0b0000011100001110,
0b0000001100001100,
// 'D'
0b0000111111111111,
0b0000111111111111,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000010000000010,
0b0000011000000110,
0b0000011111111110,
0b0000001111111100,
// 'E'
0b0000111111111111,
0b0000111111111111,
0b0000110001100011,
0b0000110001100011,
0b0000110001100011,
0b0000110001100011,
0b0000110001100011,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
// 'F'
0b0000111111111111,
0b0000111111111111,
0b0000110001100000,
0b0000110001100000,
0b0000110001100000,
0b0000110001100000,
0b0000110001100000,
0b0000110000000000,
0b0000110000000000,
0b0000110000000000,
// 'G'
0b0000001111111100,
0b0000011111111110,
0b0000011000000110,
0b0000110000000011,
0b0000100000000001,
0b0000100000000001,
0b0000110001100011,
0b0000011001100011,
0b0000011001111110,
0b0000001001111100,
// 'H'
0b0000111111111111,
0b0000111111111111,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000000001100000,
0b0000111111111111,
0b0000111111111111,
// 'I'
0b0000000000000000,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000111111111111,
0b0000111111111111,
0b0000110000000011,
0b0000110000000011,
0b0000110000000011,
0b0000000000000000,
// 'J'
0b0000000000111100,
0b0000000000011110,
0b0000000000000110,
0b0000000000000011,
0b0000000000000001,
0b0000000000000001,
0b0000110000000011,
0b0000110000000110,
0b0000111111111110,
0b0000111111111100,
// 'K'
0b0000111111111111,
0b0000111111111111,
0b0000000011000000,
0b0000000110100000,
0b0000000100110000,
0b0000001100011000,
0b0000011000001100,
0b0000010000000110,
0b0000110000000011,
0b0000100000000001,
// 'L'
0b0000111111111111,
0b0000111111111111,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
// 'M'
0b0000111111111111,
0b0000011111111111,
0b0000001000000000,
0b0000000110000000,
0b0000000011100000,
0b0000000011100000,
0b0000000110000000,
0b0000001000000000,
0b0000011111111111,
0b0000111111111111,
// 'N'
0b0000111111111111,
0b0000111111111111,
0b0000001100000000,
0b0000000110000000,
0b0000000011100000,
0b0000000001110000,
0b0000000000011000,
0b0000000000001100,
0b0000111111111111,
0b0000111111111111,
// 'O'
0b0000001111111100,
0b0000011111111110,
0b0000011000000110,
0b0000110000000011,
0b0000100000000001,
0b0000100000000001,
0b0000110000000011,
0b0000011000000110,
0b0000011111111110,
0b0000001111111100,
// 'P'
0b0000111111111111,
0b0000111111111111,
0b0000110001100000,
0b0000110001100000,
0b0000110001100000,
0b0000110001100000,
0b0000110001100000,
0b0000111011000000,
0b0000011111000000,
0b0000001110000000,
// 'Q'
0b0000001111111100,
0b0000011111111110,
0b0000011000000110,
0b0000110000000011,
0b0000100000001001,
0b0000100000001101,
0b0000110000000110,
0b0000011000000011,
0b0000011111111101,
0b0000001111111001,
// 'R'
0b0000111111111111,
0b0000111111111111,
0b0000110001100000,
0b0000110001100000,
0b0000110001110000,
0b0000110001111000,
0b0000110001111100,
0b0000111011001110,
0b0000011111000111,
0b0000001110000011,
// 'S'
0b0000001100001100,
0b0000011110001110,
0b0000010011000010,
0b0000110011000011,
0b0000100001100001,
0b0000100001100001,
0b0000110000110011,
0b0000010000110010,
0b0000011100011110,
0b0000001100001100,
// 'T'
0b0000110000000000,
0b0000110000000000,
0b0000110000000000,
0b0000110000000000,
0b0000111111111111,
0b0000111111111111,
0b0000110000000000,
0b0000110000000000,
0b0000110000000000,
0b0000110000000000,
// 'U'
0b0000111111111100,
0b0000111111111110,
0b0000000000000110,
0b0000000000000011,
0b0000000000000001,
0b0000000000000001,
0b0000000000000011,
0b0000000000000010,
0b0000111111111110,
0b0000111111111100,
// 'V'
0b0000110000000000,
0b0000011111000000,
0b0000000011111000,
0b0000000000011110,
0b0000000000000011,
0b0000000000000011,
0b0000000000011110,
0b0000000011111000,
0b0000011111000000,
0b0000110000000000,
// 'W'
0b0000111111111111,
0b0000111111111110,
0b0000000000000100,
0b0000000000011000,
0b0000000001110000,
0b0000000001110000,
0b0000000000011000,
0b0000000000000100,
0b0000111111111110,
0b0000111111111111,
// 'X'
0b0000110000000011,
0b0000011000000110,
0b0000001100001100,
0b0000000110011000,
0b0000000011110000,
0b0000000011110000,
0b0000000110011000,
0b0000001100001100,
0b0000011000000110,
0b0000110000000011,
// 'Y'
0b0000110000000000,
0b0000011000000000,
0b0000001100000000,
0b0000000110000000,
0b0000000011111111,
0b0000000011111111,
0b0000000110000000,
0b0000001100000000,
0b0000011000000000,
0b0000110000000000,
// 'Z'
0b0000110000000111,
0b0000110000001111,
0b0000110000011011,
0b0000110000110011,
0b0000110001100011,
0b0000110001100011,
0b0000110011000011,
0b0000110110000011,
0b0000111100000011,
0b0000111000000011,

// ASCII 091-096; $5B-$60
// "[" thru "`"
// '['
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000111111111111,
0b0000111111111111,
0b0000110000000011,
0b0000110000000011,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '\'
0b0000110000000000,
0b0000111000000000,
0b0000011100000000,
0b0000001110000000,
0b0000000111000000,
0b0000000011100000,
0b0000000001110000,
0b0000000000111000,
0b0000000000011100,
0b0000000000001100,
// ']'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000110000000011,
0b0000110000000011,
0b0000111111111111,
0b0000111111111111,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
// '^'
0b0000000000000000,
0b0000000110000000,
0b0000001100000000,
0b0000011000000000,
0b0000110000000000,
0b0000110000000000,
0b0000011000000000,
0b0000001100000000,
0b0000000110000000,
0b0000000000000000,
// '_'
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
0b0000000000000011,
// '`'
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000110000000000,
0b0000111000000000,
0b0000001100000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
0b0000000000000000,
};


InkShieldA0A3 MyInkShield(2);
String readString;
char unChar;

void setup()
{
  
  Serial.begin(115200);
  Serial.println("InkShield serial console...");
  Serial.println("Send characters to print:");

}


void loop()
{
  // if we get a valid byte, read analog ins:
  if (Serial.available()) {
    unChar = Serial.read();
  
  if(unChar=='B')
  {
    delayMicroseconds(3000);
    while (Serial.available()) 
    {  
      delay(3);                  
      char c = Serial.read();  
      readString += c;        
    }
  
       for (int i = 0; i < readString.length(); i++)
            {
              //int stepsPerRevolution = 10;
               Serial.print(readString[i]);
               Serial.print(" ");
              spray_letter(readString[i]);
            }
              //myStepper.step(stepsPerRevolution);
         Serial.println(" ");    
         readString = " ";     
             
   }

  }
    
}
void spray_letter(int letter)
{
  if(letter>=minChar && letter<=maxChar)
  {
    Serial.print("Printed ascii character: ");
    Serial.println(letter,DEC);
    for(int row=0;row<rowsPerChar;row++){
      word strip = font[((letter-minChar)*rowsPerChar)+row];
      MyInkShield.spray_ink(strip);
    }
  }
}
